source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2r") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2c(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path)
toc()
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2r") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2c(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path)
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2r") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2c(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path)
storage_path
save(sim_power_results, file = storage_path)
storage_path <- "Validation/data"
save(sim_power_results, file = storage_path)
save(sim_power_results)
?save
here()
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2r") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2c(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
saveRDS(sim_power_results, file = here("Validation/data", paste0(validation_name,".RDS")))
two_level_constant_effect <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect.RDS")
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
toc()
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2r") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2c(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
toc()
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
two_level_constant_effect <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect.RDS")
two_level_constant_effect
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2c") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2cfr(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2c") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 2 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2cfr(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
toc()
two_level_constant_effect <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect.RDS")
two_level_constant_effect
two_level_constant_effect_raw_results <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect_raw_results.RDS")
two_level_constant_effect_raw_results
test <- paste0("zarni", "htet", sep = "_")
test
test <- paste("zarni", "htet", sep = "_")
test
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2c") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 500 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic()
#Change naming conventions later.
validate_power_blocked_i1_2cfr(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
toc()
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
two_level_constant_effect_raw_results <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect_raw_results.RDS")
two_level_constant_effect_raw_results
toc
toc()
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
two_level_constant_effect_raw_results <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect_raw_results.RDS")
two_level_constant_effect_raw_results
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
library(RcppEigen) # Linear algebra calculations
library(snow)      # Parallelization and use of multiple clusters
library(lme4)      # Linear mixed effect models
library(PowerUpR)  # Comparison with another package that has some limitations
library(multtest)  # Multiple Testing Procedures package
library(tictoc)    # For timing of the scripts
library(here)      # For relative path sourcing
library(pum)       # For Power Under Multiplicity Package
source(here::here("Validation/Simulations", "adjust.WY.R")) # MTP Westfall-Young
source(here::here("Validation/Simulations", "gen_data_dist_2_levels.R")) # data generating functions for 2 level block and cluster
source(here::here("Validation/Simulations", "power_mcs_2_levels.R")) # Estimate power for each of the designs by running data generating function S sample times and fitting models to estimate power.
source(here::here("Validation/Simulations", "validate_power_mdes_sample_blocked_i1_2c.R")) #
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2c") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 500 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic("validating_two_level_block_constant_effect")
#Change naming conventions later.
validate_power_blocked_i1_2cfr(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
rho <- c(0,0.2,0.5,0.8)
ncl <-2 #done
procs <- c("Bonferroni", "BH", "Holm","WY") #done
design <- c("Blocked_i1_2c") #done
M <- 2 #done
MDES <- rep(0.125, M) #done
p.j.range <- c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5) #done
p.j <- 0.5 #done
S = 1000 #done
B = 2 #done
J = 20 # done
n.j = 100 #done
theta <- matrix(0,M,M) #done
diag(theta) <- 0 # done
omega <- rep(0,M) #done
Gamma.00 <- rep(0,M) #done
sig.sq <- rep(1,M)
alpha <- 0.05 #done
ICC <- rep(0.25, M) #done
R2.2 <- rep(0,M) #done
R2.1 <- rep(0, M) #done
maxT <- FALSE #done
check <- TRUE #done
storage_path <- "./Validation/data"
validation_name <- "two_level_constant_effect"
tic("validating_two_level_block_constant_effect")
#Change naming conventions later.
validate_power_blocked_i1_2cfr(rho = rho, ncl = ncl, procs = procs, design = design, M = M, MDES = MDES,
p.j.range = p.j.range, p.j = p.j, S = S, B = B, J = J,
n.j = n.j, theta = theta, omega = omega, Gamma.00 = Gamma.00, sig.sq = sig.sq,
alpha = alpha, ICC = ICC, R2.2 = R2.2, R2.1 = R2.1, maxT = maxT, rho.0_lev1 = rho.0_lev1,
rho.0_lev2 = rho.0_lev2, rho.1_lev2 = rho.1_lev2, check = check, storage_path = storage_path, validation_name = validation_name)
toc()
8657.414/360
source('~/Projects/Power-Under-Multiplicity/Validation/Simulations/validate_power_mdes_sample_blocked_i1_2c.R')
two_level_constant_effect_1000_samples_results <- readRDS("~/Projects/Power-Under-Multiplicity/Validation/data/two_level_constant_effect_1000_samples_results.RDS")
two_level_constant_effect_1000_samples_results
